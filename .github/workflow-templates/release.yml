name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_tag.outputs.tag_name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get tag name
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag_name=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits since last tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s")
        fi
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_tag.outputs.tag_name }}
        release_name: Release ${{ steps.get_tag.outputs.tag_name }}
        body: |
          ## Changes in ${{ steps.get_tag.outputs.tag_name }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Installation
          
          See the [installation guide](README.md#installation) for detailed instructions.
          
          ## Full Changelog
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.get_tag.outputs.tag_name }}...HEAD
        draft: false
        prerelease: ${{ contains(steps.get_tag.outputs.tag_name, 'rc') || contains(steps.get_tag.outputs.tag_name, 'beta') || contains(steps.get_tag.outputs.tag_name, 'alpha') }}

  build-python:
    name: Build Python Package
    runs-on: ubuntu-latest
    needs: create-release
    if: contains(github.repository, 'admin-assistant') || contains(github.repository, 'TimeLocker')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Upload wheel to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: dist/*.whl
        asset_name: ${{ github.event.repository.name }}-${{ needs.create-release.outputs.tag_name }}-py3-none-any.whl
        asset_content_type: application/zip
    
    - name: Upload source distribution to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: dist/*.tar.gz
        asset_name: ${{ github.event.repository.name }}-${{ needs.create-release.outputs.tag_name }}.tar.gz
        asset_content_type: application/gzip

  build-go:
    name: Build Go Binaries
    runs-on: ubuntu-latest
    needs: create-release
    if: contains(github.repository, 'OneMount')
    strategy:
      matrix:
        goos: [linux]
        goarch: [amd64, arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libwebkit2gtk-4.0-dev libjson-glib-dev
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        make build
        tar -czf ${{ github.event.repository.name }}-${{ needs.create-release.outputs.tag_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz -C build/ .
    
    - name: Upload binary to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ github.event.repository.name }}-${{ needs.create-release.outputs.tag_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
        asset_name: ${{ github.event.repository.name }}-${{ needs.create-release.outputs.tag_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
        asset_content_type: application/gzip
